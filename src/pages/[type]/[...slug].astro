---
export const prerender = false
import { getCollection, type CollectionEntry } from 'astro:content'
import DocumentationLayout from '../../layouts/DocumentationLayout.astro'
import type { CollectionKey } from '../../lib/config'

let { type, slug } = Astro.params as {
  type: CollectionKey | undefined
  slug: string | undefined
}

// Handle root path
if (!type && !slug) {
  // Redirect to a default page or render a home page
  return Astro.redirect('/getting-started/introduction') // Adjust this path as needed
}

if (!type) {
  return Astro.redirect('/404')
}

const pageConfig = Astro.props.pageConfig
let entry: CollectionEntry<CollectionKey> | undefined

try {
  const collection = await getCollection(type as CollectionKey)
  if (slug) {
    entry = collection.find((entry) => entry.slug === slug)
  } else {
    entry = collection.find((entry) => entry.slug === 'index')
  }
} catch (error) {
  if (error instanceof Error) {
    console.error(`Error fetching collection: ${error.message}`)
  } else {
    console.error('An unknown error occurred while fetching the collection')
  }
  return Astro.redirect('/404')
}

if (!entry) {
  console.error(`No content found for type: ${type}, slug: ${slug || 'index'}`)
  return Astro.redirect('/404')
}

const { Content } = await entry.render()
const title =
  pageConfig?.page || entry.data.title || `${type} - ${slug || 'index'}`
---

<DocumentationLayout title={title} toc={[]}>
  <Content />
</DocumentationLayout>
